service: serverless-media-portal
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name
frameworkVersion: "2"

plugins:
  - serverless-offline
  - serverless-plugin-scripts
  - serverless-export-env

package:
  patterns:
    - '!node_modules/serverless-offline'

custom:
  options: ${file(./env.yml)}
  scripts:
    hooks:
       "deploy:finalize": serverless invoke -f runAfterDeploy

provider:
  name: aws
  runtime: nodejs14.x
  region: ${self:custom.options.region}
  stage: ${self:custom.options.stage}
  logRetentionInDays: ${self:custom.options.numberOfDaysToKeepLogsFor}
  apiGateway:
    shouldStartNameWithService: true
  environment:
    # Define environment variables so we can access the information in our Lambdas (e.g. process.env.imageBucketName)
    # imageBucketName: !Ref ImageBucket 
    folderBucketName: mvt-3
    videoBucketName: playtag-korea
    videoTableName: !Join [ "", [ "smp_Videos-", '${self:custom.options.stage}']]
    userTableName: !Join [ "", [ "smp_Users-", '${self:custom.options.stage}']]
    tagTableName: !Join [ "", [ "smp_Tags-", '${self:custom.options.stage}']]
    annoTableName: !Join [ "", [ "smp_Annos-", '${self:custom.options.stage}']]
    pathTableName: !Join [ "", [ "smp_Paths-", '${self:custom.options.stage}']]

    # These aren't used on the backend but are printed to console after deployment
    apiGatewayUrl: !Join [ "", [ "https://", !Ref ApiGatewayRestApi, ".execute-api.", '${self:custom.options.region}', ".amazonaws.com/", '${self:custom.options.stage}', "/" ]]
    # imageCloudfrontDomain: !GetAtt ImageCloudfrontDistribution.DomainName
    videoCloudfrontDomain: !GetAtt VideoCloudfrontDistribution.DomainName

  iamRoleStatements:
    - Effect: "Allow"
      Action:
       - dynamodb:Query
       - dynamodb:Scan
       - dynamodb:GetItem
       - dynamodb:PutItem
       - dynamodb:UpdateItem
       - dynamodb:DeleteItem
      Resource: 
        - !GetAtt VideoTable.Arn
        - !GetAtt UserTable.Arn
        - !GetAtt TagTable.Arn
        - !GetAtt AnnoTable.Arn
        - !GetAtt PathTable.Arn

    - Effect: "Allow"
      Action:
       - s3:*
      Resource: 
        # - Fn::Join: [ "", [ !GetAtt ImageBucket.Arn, "/*" ]]
        - Fn::Join: [ "", [ arn:aws:s3:::playtag-korea, "/*" ]]

resources:
  Resources:
    # ImageBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     CorsConfiguration:
    #       CorsRules:
    #         - AllowedMethods:
    #             - GET
    #             - POST
    #             - PUT
    #             - HEAD
    #           AllowedOrigins:
    #             - "*"
    #           AllowedHeaders:
    #             - "*"
    VideoBucket:
      Type: AWS::S3::Bucket
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - POST
                - PUT
                - HEAD
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
    FolderBucket:
      Type: AWS::S3::Bucket
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - POST
                - PUT
                - HEAD
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
    VideoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.videoTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          -
            AttributeName: VideoHash
            AttributeType: S
        KeySchema:
          -
            AttributeName: VideoHash
            KeyType: HASH
    PathTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.pathTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          -
            AttributeName: PathHash
            AttributeType: S
        KeySchema:
          -
            AttributeName: PathHash
            KeyType: HASH
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.userTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          -
            AttributeName: UserHash
            AttributeType: S
        KeySchema:
          -
            AttributeName: UserHash
            KeyType: HASH
    TagTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.tagTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          -
            AttributeName: TagName
            AttributeType: S
        KeySchema:
          -
            AttributeName: TagName
            KeyType: HASH
    AnnoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.annoTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          -
            AttributeName: AnnoHash
            AttributeType: S
        KeySchema:
          -
            AttributeName: AnnoHash
            KeyType: HASH
    # ImageCloudfrontDistribution:
    #   Type: "AWS::CloudFront::Distribution"
    #   Properties:
    #     DistributionConfig:
    #       ViewerCertificate:
    #         CloudFrontDefaultCertificate: true
    #       Enabled: true
    #       HttpVersion: http2
    #       DefaultRootObject: index.html
    #       Origins:
    #         - DomainName: !GetAtt ImageBucket.RegionalDomainName
    #           Id: smp-s3-image-origin
    #           CustomOriginConfig:
    #             HTTPPort: 80
    #             HTTPSPort: 443
    #             OriginProtocolPolicy: https-only
    #       DefaultCacheBehavior:
    #         ViewerProtocolPolicy: allow-all
    #         TargetOriginId: smp-s3-image-origin
    #         AllowedMethods:
    #           - GET
    #           - HEAD
    #         Compress: true
    #         DefaultTTL: 30
    #         MinTTL: 10
    #         ForwardedValues:
    #           QueryString: true
    VideoCloudfrontDistribution:
      Type: "AWS::CloudFront::Distribution"
      Properties:
        DistributionConfig:
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
          Enabled: true
          HttpVersion: http2
          DefaultRootObject: index.html
          Origins:
            - DomainName: !GetAtt VideoBucket.RegionalDomainName
              Id: smp-s3-video-origin
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
          DefaultCacheBehavior:
            ViewerProtocolPolicy: allow-all
            TargetOriginId: smp-s3-video-origin
            AllowedMethods:
              - GET
              - HEAD
            Compress: true
            DefaultTTL: 30
            MinTTL: 10
            ForwardedValues:
              QueryString: true


functions:
  authorizeUser:
    handler: src/handlers/authorization.authorizeUser
  authorizeAdmin:
    handler: src/handlers/authorization.authorizeAdmin
  listAllVideosForUser:
    handler: src/handlers/videos.listAllVideosForUser
    description: List all videos for authorized user
    events:
      - http:
          path: /listAllVideosForUser
          method: get
          cors: true
          authorizer:
            name: authorizeUser
            resultTtlInSeconds: 0
  getVideo:
    handler: src/handlers/videos.getVideo
    description: Gets a single video
    events:
      - http:
          path: /getVideo
          method: get
          cors: true
          authorizer:
            name: authorizeUser
            resultTtlInSeconds: 0
  listRandomVideos:
    handler: src/handlers/videos.listRandomVideos
    description: Get a random list of videos for a given user
    events:
      - http:
          path: /listRandomVideos
          method: get
          cors: true
          authorizer:
            name: authorizeUser
            resultTtlInSeconds: 0
  addViewToVideo:
    handler: src/handlers/videos.addViewToVideo
    description: Adds one view to the specified video hash
    events:
      - http:
          path: /addViewToVideo
          method: get
          cors: true
          authorizer:
            name: authorizeUser
            resultTtlInSeconds: 0
  editVideo:
    handler: src/handlers/videos.editVideo
    description: Save edits to video
    events:
      - http:
          path: /editVideo
          method: post
          cors: true
          authorizer:
            name: authorizeAdmin
            resultTtlInSeconds: 0
  bucketMVT:
    handler: src/handlers/misc.bucketMVT
    description: Save file path
    # events:
    #   - s3:
    #       bucket: playtag-korea
    #       event: s3:ObjectCreated:*
    #       rules:
    #         - suffix: .mp4
    #       existing: true
  addPath:
    handler: src/handlers/videos.addPath
    description: addPath
    events:
      - http:
          path: /addPath
          method: post
          cors: true
          authorizer:
            name: authorizeUser
            resultTtlInSeconds: 0
  deleteVideo:
    handler: src/handlers/videos.deleteVideo
    description: Delete a video
    events:
      - http:
          path: /deleteVideo
          method: get
          cors: true
          authorizer:
            name: authorizeAdmin
            resultTtlInSeconds: 0
  getPresignedUrlForVideoUpload:
    handler: src/handlers/videos.getPresignedUrlForVideoUpload
    description: Generates a pre-signed URL allowing upload of .mp4 files to S3.
    events:
      - http:
          path: /getPresignedUrlForVideoUpload
          method: get
          cors: true
          authorizer:
            name: authorizeAdmin
            resultTtlInSeconds: 0
  addVideo:
    handler: src/handlers/videos.addVideo
    description: Handle video upload form submission
    events:
      - http:
          path: /addVideo
          method: post
          cors: true
          authorizer:
            name: authorizeAdmin
            resultTtlInSeconds: 0
  #needs to be removed
  getCommentsForVideo:
    handler: src/handlers/videos.getCommentsForVideo
    description: Get the comments for a specified video
    events:
      - http:
          path: /getCommentsForVideo
          method: get
          cors: true
          authorizer:
            name: authorizeUser
            resultTtlInSeconds: 0
  addCommentToVideo:
    handler: src/handlers/videos.addCommentToVideo
    description: Adds a comment to a video
    events:
      - http:
          path: /addCommentToVideo
          method: post
          cors: true
          authorizer:
            name: authorizeUser
            resultTtlInSeconds: 0
  #needs to be removed
  deleteCommentFromVideo:
    handler: src/handlers/videos.deleteCommentFromVideo
    description: Adds a comment to a video
    events:
      - http:
          path: /deleteCommentFromVideo
          method: get
          cors: true
          authorizer:
            name: authorizeUser
            resultTtlInSeconds: 0
  listUsers:
    handler: src/handlers/users.listUsers
    description: Gets a list of all users
    events:
      - http:
          path: /listUsers
          method: get
          cors: true
          authorizer:
            name: authorizeAdmin
            resultTtlInSeconds: 0
  addUser:
    handler: src/handlers/users.addUser
    description: Adds a new user
    events:
      - http:
          path: /addUser
          method: post
          cors: true
          authorizer:
            name: authorizeAdmin
            resultTtlInSeconds: 0
  editUser:
    handler: src/handlers/users.editUser
    description: Update a user
    events:
      - http:
          path: /editUser
          method: post
          cors: true
          authorizer:
            name: authorizeAdmin
            resultTtlInSeconds: 0
  deleteUser:
    handler: src/handlers/users.deleteUser
    description: Deletes a user
    events:
      - http:
          path: /deleteUser
          method: get
          cors: true
          authorizer:
            name: authorizeAdmin
            resultTtlInSeconds: 0
  listAllTags:
    handler: src/handlers/tags.listAllTags
    description: Gets every tag in the tag table
    events:
      - http:
          path: /listAllTags
          method: get
          cors: true
          authorizer:
            name: authorizeAdmin
            resultTtlInSeconds: 0
  isUserAnAdmin:
    handler: src/handlers/tags.isUserAnAdmin
    description: Finds if the user who makes the request is an admin
    events:
      - http:
          path: /isUserAnAdmin
          method: get
          cors: true
          authorizer:
            name: authorizeUser # Does this need to be user? I think users call this at some point
            resultTtlInSeconds: 0
  addTag:
    handler: src/handlers/tags.addTag
    description: Adds a tag to the smp_Tags table
    events:
      - http:
          path: /addTag
          method: post
          cors: true
          authorizer:
            name: authorizeAdmin
            resultTtlInSeconds: 0
  deleteTag:
    handler: src/handlers/tags.deleteTag
    description: Deletes a tag to the smp_Tags table
    events:
      - http:
          path: /deleteTag
          method: get
          cors: true
          authorizer:
            name: authorizeAdmin
            resultTtlInSeconds: 0
  handshake:
    handler: src/handlers/misc.handshake
    description: Perform an authenticated handshake
    events:
      - http:
          path: /handshake
          method: get
          cors: true
          authorizer:
            name: authorizeUser
            resultTtlInSeconds: 0
  # thumbnailMaker:
  #   handler: src/handlers/misc.thumbnailMaker
  #   memorySize: 3008
  #   timeout: 60
  #   maximumEventAge: 60
  #   maximumRetryAttempts: 0
  #   events:
  #     - s3:
  #         bucket: !Ref VideoBucket
  #         event: s3:ObjectCreated:*
  #         rules:
  #           - suffix: .mp4
  #         existing: true
  #   layers:
  #     - ${self:custom.options.ffmpegLayerArn}
  VideoConverter:
    handler: src/handlers/misc.VideoConverter
    maximumRetryAttempts: 0
    events:
      - s3:
          bucket: !Ref VideoBucket
          event: s3:ObjectCreated:*
          rules:
            - suffix: .mp4
          existing: true
      # - s3:
      #     bucket: playtag-korea
      #     event: s3:ObjectCreated:*
      #     rules:
      #       - suffix: .MP4
      #     existing: true

  syncVideos:
    handler: src/handlers/misc.syncVideo
    description: sync video with video bucket
    events:
      - http:
          path: /syncVideo
          method: get
          cors: true
          authorizer:
            name: authorizeAdmin
            resultTtlInSeconds: 0
  getFilePath:
    handler: src/handlers/misc.getFilePath
    description: get video file path
    events:
      - http:
          path: /getFilePath
          method: get
          cors: true
          authorizer:
            name: authorizeUser
            resultTtlInSeconds: 0
  GetVideoHashWithName:
    handler: src/handlers/videos.GetVideoHashWithName
    description: Get video hash given video name
    events:
      - http:
          path: /GetVideoHashWithName
          method: post
          cors: true
          authorizer:
            name: authorizeUser
            resultTtlInSeconds: 0
  getAnnoFromDb:
    handler: src/handlers/videos.getAnnoFromDb
    description: Get annotation data given video name
    events:
      - http:
          path: /getAnnoFromDb
          method: post
          cors: true
          authorizer:
            name: authorizeUser
            resultTtlInSeconds: 0
  getEvent:
    handler: src/handlers/videos.getEvent
    description: Get number of events
    events:
      - http:
          path: /getEvent
          method: post
          cors: true
          authorizer:
            name: authorizeUser
            resultTtlInSeconds: 0
  deleteAnno:
    handler: src/handlers/videos.deleteAnno
    description: delete anno from db
    events:
      - http:
          path: /deleteAnno
          method: post
          cors: true
          authorizer:
            name: authorizeUser
            resultTtlInSeconds: 0
  getAnnoDetail:
    handler: src/handlers/videos.getAnnoDetail
    description: get annotation detail from db
    events:
      - http:
          path: /getAnnoDetail
          method: post
          cors: true
          authorizer:
            name: authorizeUser
            resultTtlInSeconds: 0
  getSyncNum:
    handler: src/handlers/misc.getSyncNum
    description: get Numberf sync folder for one date
    events:
      - http:
          path: /getSyncNum
          method: post
          cors: true
          authorizer:
            name: authorizeUser
            resultTtlInSeconds: 0
  getForDownload:
    handler: src/handlers/videos.getForDownload
    description: get annotation detail from db for download
    events:
      - http:
          path: /getForDownload
          method: post
          cors: true
          authorizer:
            name: authorizeUser
            resultTtlInSeconds: 0
  getKidText:
    handler: src/handlers/misc.getKidText
    description: get mao details for kid
    events:
      - http:
          path: /getKidText
          method: post
          cors: true
          authorizer:
            name: authorizeUser
            resultTtlInSeconds: 0
  getKidEvent:
    handler: src/handlers/videos.getKidEvent
    description: get mao details for kid
    events:
      - http:
          path: /getKidEvent
          method: post
          cors: true
          authorizer:
            name: authorizeUser
            resultTtlInSeconds: 0
  getVideoFileName:
    handler: src/handlers/misc.getVideoFileName
    description: get mao details for kid
    events:
      - http:
          path: /getVideoFileName
          method: post
          cors: true
          authorizer:
            name: authorizeUser
            resultTtlInSeconds: 0
  
  
  
  runAfterDeploy:
    handler: src/handlers/misc.runAfterDeploy
